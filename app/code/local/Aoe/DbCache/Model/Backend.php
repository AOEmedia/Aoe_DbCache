<?php
/**
 * Dedicated database cache backend
 *
 * Uses a custom database handle (cache_write) that can be separated from the main database in the configuration
 *
 * Add following configuration to your local.xml:
 *
 * <config><global><resources>
 *  <cache_write>
 *      <connection>
 *          <host>...</host>
 *          <username>...</username>
 *          <password>...</password>
 *          <dbname>...<dbname>
 *          <initStatements><![CDATA[SET NAMES utf8]]></initStatements>
 *          <model><![CDATA[mysql4]]></model>
 *          <type><![CDATA[pdo_mysql]]></type>
 *          <pdoType><![CDATA[]]></pdoType>
 *          <active>1</active>
 *          <use></use>
 *      </connection>
 *  </cache_write>
 * </resources></global></config>
 *
 * and configure the cache backend to
 * <config><global><cache><backend><![CDATA[Aoe_DbCache_Model_Backend]]></backend></cache></global></config>
 *
 * Make sure the configured database contains following tables included all fields from the original database
 * - core_cache
 * - core_cache_tags
 * (They might be autogenerated if missing in a future version)
 *
 * @author Fabrizio Branca
 * @author Tymoteusz Motylewski
 * @since 2012-06-01
 */
class Aoe_DbCache_Model_Backend extends Varien_Cache_Backend_Database {

	/**
	 * Constructor
	 *
	 * @param array $options
	 */
	public function __construct($options = array()) {
		$options['adapter_callback'] = array($this, 'getDbAdapter');
		$options['data_table']  = Mage::getSingleton('core/resource')->getTableName('core/cache');
		$options['tags_table']  = Mage::getSingleton('core/resource')->getTableName('core/cache_tag');
		parent::__construct($options);
	}

	/**
	 * Get adapter for database cache backend model
	 *
	 * @return Zend_Db_Adapter_Abstract
	 */
	public function getDbAdapter() {
		return Mage::getSingleton('core/resource')->getConnection('cache_write');
	}

}